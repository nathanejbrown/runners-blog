{"version":3,"sources":["components/FloatingBox/FloatingBox.js","components/UI/Spinner/Spinner.js","components/BlogPost/BlogPost.js","axios-posts.js","store/actions/login.js","store/actions/actionTypes.js","store/actions/profile.js","store/actions/layout.js","containers/HomePage/HomePage.js","store/actions/posts.js","components/Input/Input.js","shared/utility.js","containers/Login/Login.js","components/ProfileImage/ProfileImage.js","containers/Profile/Profile.js","containers/Logout/Logout.js","components/Navigation/NavigationItems/NavigationItems.js","components/Navigation/Header/Header.js","components/UI/Backdrop/Backdrop.js","components/Navigation/SideDrawer/SideDrawer.js","hoc/Layout/Layout.js","containers/MyPosts/MyPosts.js","App.js","serviceWorker.js","store/reducers/posts.js","store/reducers/login.js","store/reducers/profile.js","store/reducers/layout.js","index.js"],"names":["floatingBox","react_default","a","createElement","react","className","spinner","blogPost","props","post","allClasses","classes","length","loading","Spinner_Spinner","title","body","join","instance","axios","create","baseURL","logout","localStorage","removeItem","type","redirect","path","getProfileInfo","jwt","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee","dispatch","res","wrap","_context","prev","next","get","headers","Authorization","concat","sent","message","data","name","profileImageUrl","t0","console","log","stop","this","_x","apply","arguments","getAllPostsByAuthor","_ref2","_callee2","_context2","posts","_x2","updateCurrentPath","HomePage","location","pathname","onFetchNewestPost","FloatingBox_FloatingBox","BlogPost_BlogPost","Component","connect","state","loggedIn","login","actions","Input","inputElement","elementType","value","onChange","changed","placeholder","inputPlaceholder","inputName","elementConfig","options","map","option","key","displayValue","assign","label","updateObject","oldObject","updatedProperties","objectSpread","Login","user","firstName","lastName","email","password","loggingIn","changedInput","event","preventDefault","target","updatedUser","_this","defineProperty","setState","processLogin","onStartLogin","processSignup","newUser","switchSignInType","current","loginOrSignupForm","_this2","Redirect","to","loginOrSignupButtonText","components_Input_Input","onClick","redirectPath","authData","expirationDate","Date","getTime","setItem","myToken","token","signupData","profileImage","src","alt","Profile","updatedPost","sendNewPost","createNewPost","showPhotoUpload","photoUpload","open","window","cloudinary","createUploadWidget","cloudName","uploadPreset","err","result","saveProfileImage","info","secure_url","getItem","allPosts","fullProfile","formattedPosts","id","ProfileImage_ProfileImage","profile","currentPath","layout","newPost","url","_ref3","_callee3","_context3","_x3","Logout","onLogout","NavigationItems","allButtons","alternatingButton","NavLink","header","toggle","Navigation_NavigationItems_NavigationItems","backdrop","show","clicked","sideDrawer","attachedClasses","Backdrop_Backdrop","Layout","showSideDrawer","sideDrawerToggleHandler","prevState","checkLogin","mainContent","children","Header_Header","SideDrawer_SideDrawer","MyPosts","App","routes","Switch","Route","component","exact","hoc_Layout_Layout","withRouter","Boolean","hostname","match","initialState","reducer","undefined","action","fetchPostsStart","fetchPostsSuccess","createPostSuccess","fetchPostsFailure","handleLoggedInChange","handleRedirect","startLoading","setMessage","noProfileInfo","setPosts","changeInfo","handleUpdateCurrentPath","composeEnhancers","compose","rootReducer","combineReducers","postsReducer","loginReducer","profileReducer","layoutReducer","store","createStore","applyMiddleware","thunk","app","es","BrowserRouter","basename","process","src_App_0","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dc35751a.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\nimport './FloatingBox.css';\n\nconst floatingBox = () => (\n    <Fragment>\n        <style>\n        @import url('https://fonts.googleapis.com/css?family=Mali');\n        </style>\n        <div className='box'>\n            <h1>It's about running and stuff.</h1>\n        </div>\n    </Fragment>\n)\n\nexport default floatingBox;","import React from 'react';\nimport './Spinner.css';\n\nconst spinner = () => (\n  <div className='Loader'>Loading...</div>\n);\n\nexport default spinner;","import React, { Fragment } from 'react';\nimport './BlogPost.css';\n\nimport Spinner from '../../components/UI/Spinner/Spinner';\n\nconst blogPost = (props) => {\n\n    let post = null;\n    let allClasses = props.classes ? props.classes[props.classes.length] = 'post' : ['post']\n\n    if (!props.loading && !props.post) {\n        post = (\n            <Fragment>\n                <h1 className='title'>No Blog</h1>\n                <p>Was found</p>\n            </Fragment>\n        )\n    } else if (props.loading) {\n        post = (\n            <Spinner />\n        )\n    } else {\n        post = (\n            <Fragment>\n                <h1 className='title'>{props.post.title}</h1>\n                <p>{props.post.body}</p>\n            </Fragment>\n        )\n    }\n\n    return (\n        <div className={allClasses.join(' ')}>\n            {post}\n        </div>\n    )\n}\n\nexport default blogPost;","import axios from 'axios';\n\nlet url = process.env.NODE_ENV === 'production' ? 'https://running-blog.herokuapp.com/' : 'http://localhost:3001/'\n\nconst instance = axios.create({\n  baseURL: url\n})\n\nexport default instance;","import * as actionTypes from './actionTypes';\nimport axios from '../../axios-posts';\n\nexport const login = () => {\n    return {\n      type: actionTypes.LOGIN\n    }\n}\n\nexport const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('expirationDate');\n    return {\n        type: actionTypes.LOGOUT\n    }\n}\n\nexport const startLogin = (user) => {\n    return async dispatch => {\n        try {\n            const authData = {\n                email: user.email,\n                password: user.password\n            }\n            let res = await axios.post('/auth', authData)\n            const expirationDate = new Date(new Date().getTime() + 7200 * 1000);\n            localStorage.setItem('token', res.data.myToken);\n            localStorage.setItem('expirationDate', expirationDate);\n            dispatch(login())\n        } catch (err) {\n            console.log(err)\n        }\n    }\n}\n\nexport const redirect = (path) => {\n    return {\n        type: actionTypes.REDIRECT,\n        redirect: path\n    }\n}\n\nexport const checkLogin = () => {\n    return dispatch => {\n        let token = localStorage.getItem('token') || null;\n        let expirationDate = new Date(localStorage.getItem('expirationDate') || null);\n        if (!token) {\n            dispatch(logout())\n        }\n        if (!expirationDate || expirationDate <= new Date()) {\n            dispatch(logout())\n        }\n    }\n}\n\nexport const newUser = (user) => {\n    return async dispatch => {\n        try {\n            const signupData = {\n                firstName: user.firstName,\n                lastName: user.lastName,\n                email: user.email,\n                password: user.password\n            }\n            let res = await axios.post('/auth/new', signupData)\n            const expirationDate = new Date(new Date().getTime() + 7200 * 1000);\n            localStorage.setItem('token', res.data.myToken);\n            localStorage.setItem('expirationDate', expirationDate);\n            dispatch(login())\n        } catch (err) {\n            console.log(err)\n        }\n    }\n}","export const START_LOADING = 'START_LOADING';\n\nexport const FETCH_POSTS_START = 'FETCH_POSTS_START';\nexport const FETCH_POSTS_SUCCESS = 'FETCH_POSTS_SUCCESS';\nexport const NEW_POST_SUCCESS = 'NEW_POST_SUCCESS';\nexport const FETCH_POSTS_FAILURE = 'FETCH_POSTS_FAILURE';\n\nexport const START_LOGIN = 'START_LOGIN';\nexport const LOGIN = 'LOGIN';\nexport const CHECK_LOGIN = 'CHECK_LOGIN';\nexport const REDIRECT = 'REDIRECT';\nexport const LOGOUT = 'LOGOUT';\n\nexport const GET_PROFILE_INFO = 'GET_PROFILE_INFO';\nexport const CHANGE_PROFILE_INFO = 'CHANGE_PROFILE_INFO';\nexport const START_RETRIEVING_PROFILE_DATA = 'START_RETRIEVING_PROFILE_DATA';\nexport const PROFILE_INFO_FAILURE = 'PROFILE_INFO_FAILURE';\nexport const ALL_POSTS_BY_AUTHOR = 'ALL_POSTS_BY_AUTHOR';\n\nexport const UPDATE_CURRENT_PATH = 'UPDATE_CURRENT_PATH';","import axios from '../../axios-posts';\nimport * as actionTypes from './actionTypes';\n\nexport const startLoading = () => {\n    return {\n        type: actionTypes.START_LOADING\n    }\n}\n\nexport const handleProfileInfo = (data) => {\n    return {\n        type: actionTypes.GET_PROFILE_INFO,\n        message: data.message,\n        name: data.name,\n        profileImageUrl: data.profileImageUrl\n    }\n}\n\nexport const startRetrievingData = () => {\n    return {\n        type: actionTypes.START_RETRIEVING_PROFILE_DATA\n    }\n}\n\nexport const profileInfoFailure = () => {\n    return {\n        type: actionTypes.PROFILE_INFO_FAILURE\n    }\n}\n\nexport const allPostsByAuthor = (posts) => {\n    return {\n        type: actionTypes.ALL_POSTS_BY_AUTHOR,\n        posts: posts\n    }\n}\n\nexport const changeProfileInfo = (key, value) => {\n    return {\n        type: actionTypes.CHANGE_PROFILE_INFO,\n        key: key,\n        value: value\n    }\n}\n\nexport const getProfileInfo = (jwt) => {\n    return async dispatch => {\n        try {\n            dispatch(startRetrievingData())\n            let res = await axios.get('/profile',\n            {headers: {\n                'Authorization' : `Bearer ${jwt}`\n              }\n            })\n            dispatch(handleProfileInfo(res.data))\n        } catch (err) {\n            console.log(err)\n        }\n    }\n}\n\nexport const getAllPostsByAuthor = (jwt) => {\n    return async dispatch => {\n      try {\n        dispatch(startLoading())\n        let res = await axios.get('/posts/all-by-author', {\n          headers: {\n            'Authorization': `Bearer ${jwt}`\n          }\n        })\n        dispatch(allPostsByAuthor(res.data))\n      } catch (err) {\n        console.log(err)\n      }\n    }\n  }\n\nexport const saveProfileImage = (jwt, url) => {\n    return async dispatch => {\n        try {\n            let data = {\n                profileImageUrl: url\n            }\n            let res = await axios.post('/profile/new-profile-image', data, {\n                headers: {\n                    'Authorization': `Bearer ${jwt}`\n                }\n            })\n            dispatch(changeProfileInfo('profileImageUrl', res.data.profileImageUrl))\n            console.log(res)\n        } catch (err) {\n            console.log(err)\n        }\n    }\n}","import * as actionTypes from './actionTypes';\n\nexport const updateCurrentPath = (path) => {\n    return {\n        type: actionTypes.UPDATE_CURRENT_PATH,\n        path: path\n    }\n}","import React, { Component, Fragment } from 'react';\nimport FloatingBox from '../../components/FloatingBox/FloatingBox';\nimport BlogPost from '../../components/BlogPost/BlogPost';\nimport { connect } from 'react-redux';\nimport * as actions from '../../store/actions/index';\nimport './HomePage.css';\n\nclass HomePage extends Component {\n\n    componentWillMount() {\n        this.props.updateCurrentPath(this.props.location.pathname)\n    }\n\n    componentDidMount() {\n        this.props.onFetchNewestPost();\n    }\n\n    render () {\n        return (\n            <Fragment>\n                <div className=\"App\">\n                    <FloatingBox />\n                    <div className='blog'>\n                        <BlogPost post={this.props.posts} loading={this.props.loading} />\n                    </div>\n                </div>\n            </Fragment>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        posts: state.posts.posts,\n        loading: state.posts.loading,\n        loggedIn: state.login.loggedIn\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onFetchNewestPost: () => dispatch(actions.fetchNewestPost()),\n        updateCurrentPath: (path) => dispatch(actions.updateCurrentPath(path))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HomePage);","import axios from '../../axios-posts';\nimport * as actionTypes from './actionTypes';\n\nexport const fetchPostsStart = () => {\n    return {\n      type: actionTypes.FETCH_POSTS_START\n    }\n  }\n\nexport const fetchPostsSuccess = (posts) => {\n    return {\n        type: actionTypes.FETCH_POSTS_SUCCESS,\n        posts: posts\n    }\n}\n\nexport const fetchPostsFailure = () => {\n  return {\n    type: actionTypes.FETCH_POSTS_FAILURE\n  }\n}\n\nexport const newPostSuccess = (post) => {\n  return {\n    type: actionTypes.NEW_POST_SUCCESS,\n    post: post\n  }\n}\n\nexport const fetchNewestPost = () => {\n    return async dispatch => {\n      try {\n        dispatch(fetchPostsStart())\n        let res = await axios.get('posts/newest-post')\n        dispatch(fetchPostsSuccess(res.data))\n      } catch (err) {\n        dispatch(fetchPostsFailure())\n        console.log(err)\n      }\n    }\n  }\n\nexport const createNewPost = (post, jwt) => {\n  const newPost = {\n    title: post.title,\n    body: post.body\n  }\n  return async dispatch => {\n    try {\n      let res = await axios.post('posts/new', newPost, {\n        headers: {\n        'Authorization': `Bearer ${jwt}`\n      }})\n      dispatch(newPostSuccess(res.data[0]))\n    } catch (err) {\n      console.log(err)\n    }\n\n  }\n}","import React from 'react';\nimport './Input.css';\n\nconst Input = (props) => {\n    let inputElement = null;\n\n    switch (props.elementType) {\n        case ('input'):\n            inputElement = <input\n            className='form-control'\n            value={props.value}\n            onChange={props.changed}\n            placeholder={props.inputPlaceholder}\n            name={props.inputName} />;\n            break;\n        case ('textarea'):\n            inputElement = <textarea\n            value={props.value}\n            onChange={props.changed} />;\n            break;\n        case ('select'):\n            inputElement = (\n            <select\n                value={props.value}\n                onChange={props.changed} >\n                {props.elementConfig.options.map(option => (\n                <option key={option.value} value={option.value}>\n                    {option.displayValue}\n                </option>\n                ))}\n            </select>\n            )\n        break;\n        case ('password'):\n            inputElement = <input\n                    className='form-control'\n                    type='password'\n                    onChange={props.changed}\n                    placeholder={props.inputPlaceholder}\n                    name={props.inputName}\n                    />\n        break;\n        default:\n            inputElement = <input\n            {...props.elementConfig}\n            value={props.value || ''}\n            onChange={props.changed} />\n    }\n\n    return (\n        <div>\n            <label className='Label'>{props.label}</label>\n            {inputElement}\n        </div>\n    )\n};\n    \n\nexport default Input;","export const updateObject = (oldObject, updatedProperties) => {\n    return {\n      ...oldObject,\n      ...updatedProperties\n    }\n  };","import React, { Component, Fragment } from 'react';\nimport './Login.css';\nimport Input from '../../components/Input/Input';\nimport { connect } from 'react-redux';\nimport * as actions from '../../store/actions/index';\nimport {updateObject} from '../../shared/utility';\nimport { Redirect } from 'react-router-dom';\n\nclass Login extends Component {\n\n    state = {\n        user: {\n            firstName: '',\n            lastName: '',\n            email: '',\n            password: ''\n        },\n        loggingIn: true\n    }\n\n    changedInput = (event) => {\n        event.preventDefault();\n        let name = event.target.name;\n        let value = event.target.value;\n        const updatedUser = updateObject(this.state.user, {\n            [name]: value\n          })\n        this.setState({user: updatedUser})\n    }\n\n    processLogin = (event) => {\n        event.preventDefault();\n        this.props.onStartLogin(this.state.user);\n    }\n\n    processSignup = (event) => {\n        event.preventDefault();\n        this.props.newUser(this.state.user);\n    }\n\n    switchSignInType = () => {\n        let current = this.state.loggingIn\n        this.setState({loggingIn: !current})\n    }\n\n    render () {\n\n        if (this.props.loggedIn) {\n            return (<Redirect to='/profile' />)\n        }\n\n        let loginOrSignupForm;\n        let loginOrSignupButtonText = 'Create New Account';\n        if (this.state.loggingIn) {\n            loginOrSignupForm = (\n                <div className='formBox d-flex flex-column align-items-center'>\n                    <form>\n                        <div className='form-group col-sm-12'>\n                            <Input inputName='email' elementType='input' inputPlaceholder='Email Address' label='Email Address' changed={(event) => this.changedInput(event)}></Input>\n                        </div>\n                        <div className='form-group col-sm-12'>\n                            <Input inputName='password' elementType='password' inputPlaceholder='Password' label='Password' changed={(event) => this.changedInput(event)}></Input>\n                        </div>\n                        <div className='form-group col-sm-12'>\n                            <button type='button' className='btn btn-primary btn-block' onClick={(event) => this.processLogin(event)}>Log In</button>\n                            <button type='button' className='btn btn-primary btn-block' onClick={() => this.switchSignInType()}>{loginOrSignupButtonText}</button>\n                        </div>\n                    </form>\n                </div>\n            )    \n        } else {\n            loginOrSignupButtonText = 'Sign in to existing account';\n            loginOrSignupForm = (\n                <div className='formBox d-flex flex-column align-items-center'>\n                    <form>\n                        <div className='form-group col-sm-12'>\n                            <Input inputName='firstName' elementType='input' inputPlaceholder='First Name' label='First Name' changed={(event) => this.changedInput(event)}></Input>\n                        </div>\n                        <div className='form-group col-sm-12'>\n                            <Input inputName='lastName' elementType='input' inputPlaceholder='Last Name' label='Last Name' changed={(event) => this.changedInput(event)}></Input>\n                        </div>\n                        <div className='form-group col-sm-12'>\n                            <Input inputName='email' elementType='input' inputPlaceholder='Email Address' label='Email Address' changed={(event) => this.changedInput(event)}></Input>\n                        </div>\n                        <div className='form-group col-sm-12'>\n                            <Input inputName='password' elementType='password' inputPlaceholder='Password' label='Password' changed={(event) => this.changedInput(event)}></Input>\n                        </div>\n                        <div className='form-group col-sm-12'>\n                            <button type='button' className='btn btn-primary btn-block' onClick={(event) => this.processSignup(event)}>Sign Up</button>\n                            <button type='button' className='btn btn-primary btn-block' onClick={() => this.switchSignInType()}>{loginOrSignupButtonText}</button>\n                        </div>\n                    </form>\n                </div>\n            )\n        }\n\n        return (\n            <Fragment>\n                {loginOrSignupForm}\n            </Fragment>\n        )\n\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        loading: state.posts.loading,\n        loggedIn: state.login.loggedIn,\n        redirect: state.login.redirectPath\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onStartLogin: (user) => dispatch(actions.startLogin(user)),\n        redirect: (path) => dispatch(actions.redirect(path)),\n        getProfileInfo: (token) => dispatch(actions.getProfileInfo(token)),\n        newUser: (user) => dispatch(actions.newUser(user))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","import React from 'react';\nimport './ProfileImage.css';\n\nconst profileImage = (props) => {\n    return (\n        <div className='imageContainer'>\n            <img src={props.profileImageUrl} alt='Profile' />\n            <h1>{props.name}</h1>\n        </div>\n    )\n}\n\nexport default profileImage;","import React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport * as actions from '../../store/actions/index';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport BlogPost from '../../components/BlogPost/BlogPost';\nimport ProfileImage from '../../components/ProfileImage/ProfileImage';\nimport { updateObject } from '../../shared/utility';\nimport './Profile.css';\n\nclass Profile extends Component {\n\n    state = {\n        post: {\n            title: '',\n            body: ''\n        },\n        token: null\n    }\n    \n    componentWillMount() {\n        let token = localStorage.getItem('token') || null;\n        this.setState({token: token})\n        if (!token) {\n            this.props.redirect(<Redirect to={'/'} />);\n        } else {\n            this.props.getProfileInfo(token)\n            this.props.getAllPostsByAuthor(token)\n        }\n        this.props.updateCurrentPath(this.props.location.pathname)\n    }\n\n    changedInput = (event) => {\n        event.preventDefault();\n        let name = event.target.name;\n        let value = event.target.value;\n        const updatedPost = updateObject(this.state.post, {\n            [name]: value\n          })\n        this.setState({post: updatedPost})\n    }\n    \n    sendNewPost = (event) => {\n        event.preventDefault();\n        this.props.createNewPost(this.state.post, this.state.token);\n    }\n\n    showPhotoUpload = () => {\n        this.photoUpload.open();\n    }\n    \n    photoUpload = window.cloudinary.createUploadWidget({\n            cloudName: 'drwjbjpwv', \n            uploadPreset: 'tlkohed6'}, (err, result) => { \n                if (err) {\n                    console.log('err', err)\n                } else {\n                    if (result.event === 'success') {\n                        this.props.saveProfileImage(this.state.token, result.info.secure_url);\n                    }\n                }\n            })\n    \n    render () {\n\n        let fullProfile = <Spinner />\n        let allPosts;\n        // (\n        //     <div className='d-flex flex-column align-items-center'>\n        //         <form>\n        //             <div className='form-group col-sm-12'>\n        //                 <Input inputName='title' elementType='input' inputPlaceholder='Title' label='Title' changed={(event) => this.changedInput(event)}></Input>\n        //             </div>\n        //             <div className='form-group col-sm-12'>\n        //                 <Input inputName='body' elementType='input' inputPlaceholder='Body' label='Body' changed={(event) => this.changedInput(event)}></Input>\n        //             </div>\n        //             <div className='form-group col-sm-12'>\n        //                 <button type='button' className='btn btn-primary' onClick={(event) => this.sendNewPost(event)}>Submit</button>\n        //             </div>\n        //         </form>\n        //     </div>\n        // );\n\n        if (!this.props.loading && this.props.posts) {\n            let formattedPosts = this.props.posts.map((post) => {\n                return <BlogPost post={post} loading={this.props.loading} key={post.id} />\n            })\n            allPosts = (\n                <div className='postsContainer'>\n                    {formattedPosts}\n                </div>\n            )\n            fullProfile = (\n                <Fragment>\n                    <ProfileImage name={this.props.name} profileImageUrl={this.props.profileImageUrl} />\n                    <div className='profileContainer'>\n                        {this.props.redirectPath}\n                        {allPosts}\n                        <button onClick={this.showPhotoUpload}>Upload</button>\n                        {/* {formOrPost} */}\n                    </div>\n                </Fragment>\n            )\n        }\n\n        // if (this.props.newPost) {\n        //     formOrPost = <BlogPost post={this.props.newPost} />\n        // }\n\n        return (\n            <Fragment>\n                {fullProfile}\n            </Fragment>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        message: state.profile.message,\n        loggedIn: state.login.loggedIn,\n        redirectPath: state.login.redirectPath,\n        loading: state.profile.loading,\n        currentPath: state.layout.path,\n        name: state.profile.name,\n        newPost: state.posts.newPost,\n        posts: state.profile.posts,\n        profileImageUrl: state.profile.profileImageUrl\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        getProfileInfo: (token) => dispatch(actions.getProfileInfo(token)),\n        redirect: (path) => dispatch(actions.redirect(path)),\n        logout: () => dispatch(actions.logout()),\n        updateCurrentPath: (path) => dispatch(actions.updateCurrentPath(path)),\n        createNewPost: (post, token) => dispatch(actions.createNewPost(post, token)),\n        getAllPostsByAuthor: (token) => dispatch(actions.getAllPostsByAuthor(token)),\n        saveProfileImage: (token, url) => dispatch(actions.saveProfileImage(token, url))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Profile);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../../store/actions/index';\nimport { Redirect } from 'react-router-dom';\n\nclass Logout extends Component {\n    componentWillMount() {\n        this.props.onLogout();\n    }\n\n    render () {\n        return (\n            <Redirect to='/' />\n        )\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onLogout: () => dispatch(actions.logout())\n    }\n}\n\nexport default connect(null, mapDispatchToProps)(Logout);","import React, { Fragment } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport './NavigationItems.css';\n    \nconst NavigationItems = (props) => {\n\n    let allButtons;\n\n    let alternatingButton;\n\n    if (props.current === '/') {\n        alternatingButton = <h3 className='loginButton'><NavLink to=\"/profile\">Profile</NavLink></h3>\n    } else if (props.current === '/profile') {\n        alternatingButton = <h3 className=\"loginButton\"><NavLink to=\"/home\">Home</NavLink></h3>\n    } else {\n        alternatingButton = (\n            <Fragment>\n                <h3 className=\"loginButton\"><NavLink to=\"/home\">Home</NavLink></h3>\n                <h3 className='loginButton'><NavLink to=\"/profile\">Profile</NavLink></h3>\n            </Fragment>\n        )\n    }\n\n    if (props.loggedIn) {\n        allButtons = (\n            <Fragment>\n                {alternatingButton}\n                <h3 className=\"loginButton\"><NavLink to=\"/logout\">Log Out</NavLink></h3>\n            </Fragment>\n        );\n    } else {\n        allButtons = (<h3 className=\"loginButton\"><NavLink to=\"/login\">Log In</NavLink></h3>);\n    }\n\n    return (\n        <Fragment>\n            {allButtons}\n        </Fragment>\n    )\n\n}\n\nexport default NavigationItems","import React, { Fragment } from 'react';\nimport './Header.css';\nimport NavigationItems from '../NavigationItems/NavigationItems';\nimport { NavLink } from 'react-router-dom';\n\nconst header = (props) => {\n\n    return (\n        <Fragment>\n            <div className=\"header\">\n                <div className='DrawerToggle' onClick={props.toggle}>\n                    <div></div>\n                    <div></div>\n                    <div></div>\n                </div>\n                <h3 className=\"headerH3\"><NavLink to=\"/home\">Running Blog Thing</NavLink></h3>\n                <div className=\"innerHeader desktopOnly\">\n                    <NavigationItems loggedIn={props.loggedIn} current={props.current} />\n                </div>\n            </div>\n        </Fragment>\n    )\n}\n\nexport default header;","import React from 'react';\n\nimport './Backdrop.css';\n\nconst backdrop = (props) => (\n  props.show ? <div className='Backdrop' onClick={props.clicked}></div> : null\n)\n\nexport default backdrop;\n","import React, { Fragment } from 'react';\n\nimport NavigationItems from '../NavigationItems/NavigationItems';\nimport './SideDrawer.css';\nimport Backdrop from '../../UI/Backdrop/Backdrop';\n\nconst sideDrawer = (props) => {\n  let attachedClasses = ['SideDrawer', 'Close'];\n  if (props.open) {\n    attachedClasses = ['SideDrawer', 'Open'];\n  }\n\n  return (\n    <Fragment>\n      <Backdrop show={props.open} clicked={props.toggle}/>\n      <div className={attachedClasses.join(' ')} onClick={props.toggle}>\n        <nav className='sideDrawerNav'>\n          <NavigationItems loggedIn={props.loggedIn} current={props.current} />\n        </nav>\n      </div>\n    </Fragment>\n  )\n}\n\nexport default sideDrawer;\n","import React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport Header from '../../components/Navigation/Header/Header';\nimport SideDrawer from '../../components/Navigation/SideDrawer/SideDrawer';\nimport './Layout.css'\nimport { checkLogin } from '../../store/actions/index';\n\nclass Layout extends Component {\n    state = {\n        showSideDrawer: false\n    }\n\n    componentWillMount() {\n        this.props.checkLogin()\n    }\n\n    sideDrawerToggleHandler = () => {\n        this.setState((prevState) => {\n          return {showSideDrawer: !prevState.showSideDrawer}\n        })\n    }\n\n    \n    render () {\n\n        let mainContent = (\n            <main>\n                {this.props.children}\n            </main>\n        )\n\n        if (this.state.showSideDrawer) {\n            mainContent = (\n                <main className='noScrollMain'>\n                    {this.props.children}\n                </main>\n            )\n        }\n\n        return (\n            <Fragment>\n                <Header loggedIn={this.props.loggedIn} toggle={this.sideDrawerToggleHandler} current={this.props.currentPath} />\n                <SideDrawer loggedIn={this.props.loggedIn} open={this.state.showSideDrawer} toggle={this.sideDrawerToggleHandler} current={this.props.currentPath} />\n                {mainContent}\n            </Fragment>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        loggedIn: state.login.loggedIn,\n        currentPath: state.layout.path\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        checkLogin: () => dispatch(checkLogin())\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Layout);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../../store/actions/index';\n\nclass MyPosts extends Component {\n\n    componentWillMount() {\n        const token = localStorage.getItem('token');\n        this.props.getAllPostsByAuthor(token)\n    }\n\n    render() {\n        return (\n            <h1>Hello</h1>\n        )\n    }\n}\n\n// const mapStateToProps = state => {\n//     return {\n\n//     }\n// }\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        getAllPostsByAuthor: (token) => dispatch(actions.getAllPostsByAuthor(token)),\n    }\n}\n\nexport default connect(null, mapDispatchToProps)(MyPosts);","import React, { Component } from 'react';\nimport './App.css';\n// import asyncComponent from './hoc/asyncComponent/asyncComponent';\nimport { Switch, Route, Redirect, withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport HomePage from './containers/HomePage/HomePage';\nimport Login from './containers/Login/Login';\nimport Profile from './containers/Profile/Profile';\nimport Logout from './containers/Logout/Logout';\nimport Layout from './hoc/Layout/Layout';\nimport MyPosts from './containers/MyPosts/MyPosts';\n\n// const asyncLogin = asyncComponent(() => {\n//   return import('./containers/Login/Login');\n// });\n\n// const asyncHome = asyncComponent(() => {\n//   return import ('./containers/HomePage/HomePage');\n// })\n\nclass App extends Component {\n  render() {\n\n    let routes = (\n      <Switch>\n        <Route path=\"/login\" component={Login} />\n        <Route path=\"/\" exact component={HomePage} />\n        <Redirect to=\"/\" />\n      </Switch>\n    )\n\n    if (this.props.loggedIn) {\n      routes = (\n        <Switch>\n          <Route path=\"/logout\" component={Logout} />\n          <Route path=\"/login\" component={Login} />\n          <Route path=\"/profile\" component={Profile} />\n          <Route path=\"/myposts\" component={MyPosts} />\n          <Route path=\"/\" exact component={HomePage} />\n          <Redirect to=\"/\" />\n        </Switch>\n      )\n    }\n\n    return (\n      <div>\n        <Layout>\n          {routes}\n        </Layout>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    loggedIn: state.login.loggedIn\n  }\n}\n\nexport default withRouter(connect(mapStateToProps, null)(App));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { updateObject } from '../../shared/utility';\nimport * as actionTypes from '../actions/actionTypes';\n\nconst initialState = {\n    posts: null,\n    loading: false,\n    newPost: null\n}\n\nconst fetchPostsStart = (state, action) => {\n    return updateObject(state, {loading: true});\n}\n\nconst fetchPostsSuccess = (state, action) => {\n    return updateObject(state, {\n        posts: action.posts,\n        loading: false\n      });\n}\n\nconst createPostSuccess = (state, action) => {\n    return updateObject(state, {\n        newPost: action.post\n    })\n}\n\nconst fetchPostsFailure = (state, action) => {\n    return updateObject(state, {\n        loading: false\n    })\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n      case actionTypes.FETCH_POSTS_START: return fetchPostsStart(state, action);\n      case actionTypes.FETCH_POSTS_SUCCESS: return fetchPostsSuccess(state, action);\n      case actionTypes.NEW_POST_SUCCESS: return createPostSuccess(state, action);\n      case actionTypes.FETCH_POSTS_FAILURE: return fetchPostsFailure(state, action);\n      default: return state;\n    }\n}\n\nexport default reducer; \n","import { updateObject } from '../../shared/utility';\nimport * as actionTypes from '../actions/actionTypes';\n\nconst initialState = {\n    loggedIn: localStorage.getItem('token') != null, \n    redirectPath: null\n}\n\nconst handleLoggedInChange = (state, action) => {\n    return updateObject(state, {\n        loggedIn: localStorage.getItem('token') != null\n    })\n}\n\nconst handleRedirect = (state, action) => {\n    return updateObject(state, {\n        redirectPath: action.redirect\n    })\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.LOGIN: return handleLoggedInChange(state, action);\n        case actionTypes.REDIRECT: return handleRedirect(state, action);\n        case actionTypes.LOGOUT: return handleLoggedInChange(state, action);\n        default: return state;\n    }\n}\n\nexport default reducer;","import { updateObject } from '../../shared/utility';\nimport * as actionTypes from '../actions/actionTypes';\n\nconst initialState = {\n    message: null,\n    loading: false,\n    name: null,\n    posts: null,\n    profileImageUrl: null\n}\n\nconst setMessage = (state, action) => {\n    return updateObject(state, {\n        message: action.message,\n        loading: false,\n        name: action.name,\n        profileImageUrl: action.profileImageUrl\n      });\n}\n\nconst startLoading = (state) => {\n    return updateObject(state, {\n        loading: true\n    })\n}\n\nconst noProfileInfo = (state) => {\n    return updateObject(state, {\n        loading: false\n    })\n}\n\nconst setPosts = (state, action) => {\n    return updateObject(state, {\n        posts: action.posts,\n        loading: false\n    })\n}\n\nconst changeInfo = (state, action) => {\n    return updateObject(state, {\n        [action.key]: [action.value]\n    })\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n      case actionTypes.GET_PROFILE_INFO: return setMessage(state, action);\n      case actionTypes.START_RETRIEVING_PROFILE_DATA: return startLoading(state, action);\n      case actionTypes.PROFILE_INFO_FAILURE: return noProfileInfo(state);\n      case actionTypes.ALL_POSTS_BY_AUTHOR: return setPosts(state, action);\n      case actionTypes.START_LOADING: return startLoading(state);\n      case actionTypes.CHANGE_PROFILE_INFO: return changeInfo(state, action);\n      default: return state;\n    }\n}\n\nexport default reducer; ","import { updateObject } from '../../shared/utility';\nimport * as actionTypes from '../actions/actionTypes';\n\nconst initialState = {\n    path: null\n}\n\nconst handleUpdateCurrentPath = (state, action) => {\n    return updateObject(state, {\n        path: action.path\n    })\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.UPDATE_CURRENT_PATH: return handleUpdateCurrentPath(state, action);\n        default: return state;\n    }\n}\n\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport { createStore, applyMiddleware, compose, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport postsReducer from './store/reducers/posts';\nimport loginReducer from './store/reducers/login';\nimport profileReducer from './store/reducers/profile';\nimport layoutReducer from './store/reducers/layout';\n\nconst composeEnhancers = process.env.NODE_ENV === 'development' ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : null || compose;\n\nconst rootReducer = combineReducers({\n    posts: postsReducer,\n    login: loginReducer,\n    profile: profileReducer,\n    layout: layoutReducer\n})\n\nconst store = createStore(rootReducer, composeEnhancers(\n    applyMiddleware(thunk)\n    ));\n    \n    const app = (\n    <Provider store={store}>\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\n            <App />\n        </BrowserRouter>\n    </Provider>\n)\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}