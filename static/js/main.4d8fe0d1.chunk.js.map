{"version":3,"sources":["components/FloatingBox/FloatingBox.js","components/UI/Spinner/Spinner.js","components/BlogPost/BlogPost.js","axios-posts.js","store/actions/login.js","store/actions/actionTypes.js","store/actions/profile.js","store/actions/layout.js","containers/HomePage/HomePage.js","store/actions/posts.js","components/Input/Input.js","shared/utility.js","containers/Login/Login.js","containers/Profile/Profile.js","containers/Logout/Logout.js","components/Navigation/NavigationItems/NavigationItems.js","components/Navigation/Header/Header.js","components/UI/Backdrop/Backdrop.js","components/Navigation/SideDrawer/SideDrawer.js","hoc/Layout/Layout.js","containers/MyPosts/MyPosts.js","App.js","serviceWorker.js","store/reducers/posts.js","store/reducers/login.js","store/reducers/profile.js","store/reducers/layout.js","index.js"],"names":["floatingBox","react_default","a","createElement","react","className","spinner","blogPost","props","post","loading","Spinner_Spinner","title","body","instance","axios","create","baseURL","logout","localStorage","removeItem","type","redirect","path","getProfileInfo","jwt","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee","dispatch","res","wrap","_context","prev","next","get","headers","Authorization","concat","sent","message","data","name","t0","console","log","stop","this","_x","apply","arguments","updateCurrentPath","HomePage","location","pathname","onFetchNewestPost","FloatingBox_FloatingBox","BlogPost_BlogPost","posts","Component","connect","state","loggedIn","login","actions","Input","inputElement","elementType","value","onChange","changed","placeholder","inputPlaceholder","inputName","elementConfig","options","map","option","key","displayValue","assign","label","updateObject","oldObject","updatedProperties","objectSpread","Login","user","email","password","changedInput","event","preventDefault","target","updatedUser","_this","defineProperty","setState","processLogin","onStartLogin","_this2","Redirect","to","components_Input_Input","onClick","redirectPath","authData","expirationDate","Date","getTime","setItem","myToken","token","Profile","updatedPost","sendNewPost","createNewPost","getItem","messageFromBackend","formOrPost","newPost","profile","currentPath","layout","_ref2","_callee2","_context2","_x2","Logout","onLogout","NavigationItems","allButtons","alternatingButton","current","NavLink","header","toggle","Navigation_NavigationItems_NavigationItems","backdrop","show","clicked","sideDrawer","attachedClasses","open","Backdrop_Backdrop","join","Layout","showSideDrawer","sideDrawerToggleHandler","prevState","checkLogin","mainContent","children","Header_Header","SideDrawer_SideDrawer","MyPosts","getAllPostsByAuthor","_ref3","_callee3","_context3","_x3","App","routes","Switch","Route","component","exact","hoc_Layout_Layout","withRouter","Boolean","window","hostname","match","initialState","reducer","length","undefined","action","fetchPostsStart","fetchPostsSuccess","createPostSuccess","fetchPostsFailure","handleLoggedInChange","handleRedirect","setMessage","startLoading","noProfileInfo","handleUpdateCurrentPath","composeEnhancers","compose","rootReducer","combineReducers","postsReducer","loginReducer","profileReducer","layoutReducer","store","createStore","applyMiddleware","thunk","app","es","BrowserRouter","basename","process","src_App_0","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4d8fe0d1.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\nimport './FloatingBox.css';\n\nconst floatingBox = () => (\n    <Fragment>\n        <style>\n        @import url('https://fonts.googleapis.com/css?family=Mali');\n        </style>\n        <div className='box'>\n            <h1>It's about running and stuff.</h1>\n        </div>\n    </Fragment>\n)\n\nexport default floatingBox;","import React from 'react';\nimport './Spinner.css';\n\nconst spinner = () => (\n  <div className='Loader'>Loading...</div>\n);\n\nexport default spinner;","import React, { Fragment } from 'react';\nimport './BlogPost.css';\n\nimport Spinner from '../../components/UI/Spinner/Spinner';\n\nconst blogPost = (props) => {\n\n    let post = null;\n\n    if (!props.loading && !props.post) {\n        post = (\n            <Fragment>\n                <h1 className='title'>No Blog</h1>\n                <p>Was found</p>\n            </Fragment>\n        )\n    } else if (props.loading) {\n        post = (\n            <Spinner />\n        )\n    } else {\n        post = (\n            <Fragment>\n                <h1 className='title'>{props.post.title}</h1>\n                <p>{props.post.body}</p>\n            </Fragment>\n        )\n    }\n\n    return (\n        <div className='post'>\n            {post}\n        </div>\n    )\n}\n\nexport default blogPost;","import axios from 'axios';\n\nlet url = process.env.NODE_ENV === 'production' ? 'https://running-blog.herokuapp.com/' : 'http://localhost:3001/'\n\nconst instance = axios.create({\n  baseURL: url\n})\n\nexport default instance;","import * as actionTypes from './actionTypes';\nimport axios from '../../axios-posts';\n\nexport const login = () => {\n    return {\n      type: actionTypes.LOGIN\n    }\n}\n\nexport const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('expirationDate');\n    return {\n        type: actionTypes.LOGOUT\n    }\n}\n\nexport const startLogin = (user) => {\n    return async dispatch => {\n        try {\n            const authData = {\n                email: user.email,\n                password: user.password\n            }\n            let res = await axios.post('/auth', authData)\n            const expirationDate = new Date(new Date().getTime() + 7200 * 1000);\n            localStorage.setItem('token', res.data.myToken);\n            localStorage.setItem('expirationDate', expirationDate);\n            dispatch(login())\n        } catch (err) {\n            console.log(err)\n        }\n    }\n}\n\nexport const redirect = (path) => {\n    return {\n        type: actionTypes.REDIRECT,\n        redirect: path\n    }\n}\n\nexport const checkLogin = () => {\n    return dispatch => {\n        let token = localStorage.getItem('token') || null;\n        let expirationDate = new Date(localStorage.getItem('expirationDate') || null);\n        if (!token) {\n            dispatch(logout())\n        }\n        if (!expirationDate || expirationDate <= new Date()) {\n            dispatch(logout())\n        }\n    }\n}","export const FETCH_POSTS_START = 'FETCH_POSTS_START';\nexport const FETCH_POSTS_SUCCESS = 'FETCH_POSTS_SUCCESS';\nexport const NEW_POST_SUCCESS = 'NEW_POST_SUCCESS';\nexport const FETCH_POSTS_FAILURE = 'FETCH_POSTS_FAILURE';\n\nexport const START_LOGIN = 'START_LOGIN';\nexport const LOGIN = 'LOGIN';\nexport const CHECK_LOGIN = 'CHECK_LOGIN';\nexport const REDIRECT = 'REDIRECT';\nexport const LOGOUT = 'LOGOUT';\n\nexport const GET_PROFILE_INFO = 'GET_PROFILE_INFO';\nexport const START_RETRIEVING_PROFILE_DATA = 'START_RETRIEVING_PROFILE_DATA';\nexport const PROFILE_INFO_FAILURE = 'PROFILE_INFO_FAILURE';\n\nexport const UPDATE_CURRENT_PATH = 'UPDATE_CURRENT_PATH';","import axios from '../../axios-posts';\nimport * as actionTypes from './actionTypes';\n\nexport const handleProfileInfo = (data) => {\n    return {\n        type: actionTypes.GET_PROFILE_INFO,\n        message: data.message,\n        name: data.name\n    }\n}\n\nexport const startRetrievingData = () => {\n    return {\n        type: actionTypes.START_RETRIEVING_PROFILE_DATA\n    }\n}\n\nexport const profileInfoFailure = () => {\n    return {\n        type: actionTypes.PROFILE_INFO_FAILURE\n    }\n}\n\nexport const getProfileInfo = (jwt) => {\n    return async dispatch => {\n        try {\n            dispatch(startRetrievingData())\n            let res = await axios.get('/profile',\n            {headers: {\n                'Authorization' : `Bearer ${jwt}`\n              }\n            })\n            dispatch(handleProfileInfo(res.data))\n        } catch (err) {\n            console.log(err)\n        }\n    }\n}","import * as actionTypes from './actionTypes';\n\nexport const updateCurrentPath = (path) => {\n    return {\n        type: actionTypes.UPDATE_CURRENT_PATH,\n        path: path\n    }\n}","import React, { Component, Fragment } from 'react';\nimport FloatingBox from '../../components/FloatingBox/FloatingBox';\nimport BlogPost from '../../components/BlogPost/BlogPost';\nimport { connect } from 'react-redux';\nimport * as actions from '../../store/actions/index';\nimport './HomePage.css';\n\nclass HomePage extends Component {\n\n    componentWillMount() {\n        this.props.updateCurrentPath(this.props.location.pathname)\n    }\n\n    componentDidMount() {\n        this.props.onFetchNewestPost();\n    }\n\n    render () {\n        return (\n            <Fragment>\n                <div className=\"App\">\n                    <FloatingBox />\n                    <div className='blog'>\n                        <BlogPost post={this.props.posts} loading={this.props.loading} />\n                    </div>\n                </div>\n            </Fragment>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        posts: state.posts.posts,\n        loading: state.posts.loading,\n        loggedIn: state.login.loggedIn\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onFetchNewestPost: () => dispatch(actions.fetchNewestPost()),\n        updateCurrentPath: (path) => dispatch(actions.updateCurrentPath(path))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HomePage);","import axios from '../../axios-posts';\nimport * as actionTypes from './actionTypes';\n\nexport const fetchPostsStart = () => {\n    return {\n      type: actionTypes.FETCH_POSTS_START\n    }\n  }\n\nexport const fetchPostsSuccess = (posts) => {\n    return {\n        type: actionTypes.FETCH_POSTS_SUCCESS,\n        posts: posts\n    }\n}\n\nexport const fetchPostsFailure = () => {\n  return {\n    type: actionTypes.FETCH_POSTS_FAILURE\n  }\n}\n\nexport const newPostSuccess = (post) => {\n  return {\n    type: actionTypes.NEW_POST_SUCCESS,\n    post: post\n  }\n}\n\nexport const fetchNewestPost = () => {\n    return async dispatch => {\n      try {\n        dispatch(fetchPostsStart())\n        let res = await axios.get('posts/newest-post')\n        dispatch(fetchPostsSuccess(res.data))\n      } catch (err) {\n        dispatch(fetchPostsFailure())\n        console.log(err)\n      }\n    }\n  }\n\nexport const createNewPost = (post, jwt) => {\n  const newPost = {\n    title: post.title,\n    body: post.body\n  }\n  return async dispatch => {\n    try {\n      let res = await axios.post('posts/new', newPost, {\n        headers: {\n        'Authorization': `Bearer ${jwt}`\n      }})\n      dispatch(newPostSuccess(res.data[0]))\n    } catch (err) {\n      console.log(err)\n    }\n\n  }\n}\n\nexport const getAllPostsByAuthor = (jwt) => {\n  return async dispatch => {\n    try {\n      let res = await axios.get('/posts/all-by-author', {\n        headers: {\n          'Authorization': `Bearer ${jwt}`\n        }\n      })\n      console.log(res)\n    } catch (err) {\n      console.log(err)\n    }\n  }\n}","import React from 'react';\nimport './Input.css';\n\nconst Input = (props) => {\n    let inputElement = null;\n\n    switch (props.elementType) {\n        case ('input'):\n            inputElement = <input\n            className='form-control'\n            value={props.value}\n            onChange={props.changed}\n            placeholder={props.inputPlaceholder}\n            name={props.inputName} />;\n            break;\n        case ('textarea'):\n            inputElement = <textarea\n            value={props.value}\n            onChange={props.changed} />;\n            break;\n        case ('select'):\n            inputElement = (\n            <select\n                value={props.value}\n                onChange={props.changed} >\n                {props.elementConfig.options.map(option => (\n                <option key={option.value} value={option.value}>\n                    {option.displayValue}\n                </option>\n                ))}\n            </select>\n            )\n        break;\n        case ('password'):\n            inputElement = <input\n                    className='form-control'\n                    type='password'\n                    onChange={props.changed}\n                    placeholder={props.inputPlaceholder}\n                    name={props.inputName}\n                    />\n        break;\n        default:\n            inputElement = <input\n            {...props.elementConfig}\n            value={props.value || ''}\n            onChange={props.changed} />\n    }\n\n    return (\n        <div>\n            <label className='Label'>{props.label}</label>\n            {inputElement}\n        </div>\n    )\n};\n    \n\nexport default Input;","export const updateObject = (oldObject, updatedProperties) => {\n    return {\n      ...oldObject,\n      ...updatedProperties\n    }\n  };","import React, { Component, Fragment } from 'react';\nimport './Login.css';\nimport Input from '../../components/Input/Input';\nimport { connect } from 'react-redux';\nimport * as actions from '../../store/actions/index';\nimport {updateObject} from '../../shared/utility';\nimport { Redirect } from 'react-router-dom';\n\nclass Login extends Component {\n\n    state = {\n        user: {\n            email: '',\n            password: ''\n        }\n    }\n\n    changedInput = (event) => {\n        event.preventDefault();\n        let name = event.target.name;\n        let value = event.target.value;\n        const updatedUser = updateObject(this.state.user, {\n            [name]: value\n          })\n        this.setState({user: updatedUser})\n    }\n\n    processLogin = (event) => {\n        event.preventDefault();\n        this.props.onStartLogin(this.state.user);\n    }\n\n    render () {\n\n        if (this.props.loggedIn) {\n            return (<Redirect to='/profile' />)\n        }\n\n        return (\n            <Fragment>\n                <div className='formBox d-flex flex-column align-items-center'>\n                    <form>\n                        <div className='form-group col-sm-12'>\n                            <Input inputName='email' elementType='input' inputPlaceholder='Email Address' label='Email Address' changed={(event) => this.changedInput(event)}></Input>\n                        </div>\n                        <div className='form-group col-sm-12'>\n                            <Input inputName='password' elementType='password' inputPlaceholder='Password' label='Password' changed={(event) => this.changedInput(event)}></Input>\n                        </div>\n                        <div className='form-group col-sm-12'>\n                            <button type='button' className='btn btn-primary' onClick={(event) => this.processLogin(event)}>Log In</button>\n                        </div>\n                    </form>\n                </div>\n            </Fragment>\n        )\n\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        loading: state.posts.loading,\n        loggedIn: state.login.loggedIn,\n        redirect: state.login.redirectPath\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onStartLogin: (user) => dispatch(actions.startLogin(user)),\n        redirect: (path) => dispatch(actions.redirect(path)),\n        getProfileInfo: (token) => dispatch(actions.getProfileInfo(token))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","import React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport * as actions from '../../store/actions/index';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport BlogPost from '../../components/BlogPost/BlogPost';\nimport Input from '../../components/Input/Input';\nimport { updateObject } from '../../shared/utility';\nimport './Profile.css';\n\nclass Profile extends Component {\n\n    state = {\n        post: {\n            title: '',\n            body: ''\n        },\n        token: null\n    }\n    \n    componentWillMount() {\n        let token = localStorage.getItem('token') || null;\n        this.setState({token: token})\n        if (!token) {\n            this.props.redirect(<Redirect to={'/'} />);\n        } else {\n            this.props.getProfileInfo(token)\n        }\n        this.props.updateCurrentPath(this.props.location.pathname)\n    }\n\n    changedInput = (event) => {\n        event.preventDefault();\n        let name = event.target.name;\n        let value = event.target.value;\n        const updatedPost = updateObject(this.state.post, {\n            [name]: value\n          })\n        this.setState({post: updatedPost})\n    }\n    \n    sendNewPost = (event) => {\n        event.preventDefault();\n        this.props.createNewPost(this.state.post, this.state.token);\n    }\n\n    render () {\n\n        let messageFromBackend = <Spinner />\n        let formOrPost = (\n            <div className='d-flex flex-column align-items-center'>\n                <form>\n                    <div className='form-group col-sm-12'>\n                        <Input inputName='title' elementType='input' inputPlaceholder='Title' label='Title' changed={(event) => this.changedInput(event)}></Input>\n                    </div>\n                    <div className='form-group col-sm-12'>\n                        <Input inputName='body' elementType='input' inputPlaceholder='Body' label='Body' changed={(event) => this.changedInput(event)}></Input>\n                    </div>\n                    <div className='form-group col-sm-12'>\n                        <button type='button' className='btn btn-primary' onClick={(event) => this.sendNewPost(event)}>Log In</button>\n                    </div>\n                </form>\n            </div>\n        );\n\n        if (!this.props.loading) {\n            messageFromBackend = <h1>{this.props.message}{this.props.name}</h1>\n        }\n\n        if (this.props.newPost) {\n            formOrPost = <BlogPost post={this.props.newPost} />\n        }\n\n        return (\n            <Fragment>\n                <div className='profileContainer'>\n                    {messageFromBackend}\n                    {this.props.redirectPath}\n                    {formOrPost}\n                </div>\n            </Fragment>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        message: state.profile.message,\n        loggedIn: state.login.loggedIn,\n        redirectPath: state.login.redirectPath,\n        loading: state.profile.loading,\n        currentPath: state.layout.path,\n        name: state.profile.name,\n        newPost: state.posts.newPost\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        getProfileInfo: (token) => dispatch(actions.getProfileInfo(token)),\n        redirect: (path) => dispatch(actions.redirect(path)),\n        logout: () => dispatch(actions.logout()),\n        updateCurrentPath: (path) => dispatch(actions.updateCurrentPath(path)),\n        createNewPost: (post, token) => dispatch(actions.createNewPost(post, token))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Profile);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../../store/actions/index';\nimport { Redirect } from 'react-router-dom';\n\nclass Logout extends Component {\n    componentWillMount() {\n        this.props.onLogout();\n    }\n\n    render () {\n        return (\n            <Redirect to='/' />\n        )\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onLogout: () => dispatch(actions.logout())\n    }\n}\n\nexport default connect(null, mapDispatchToProps)(Logout);","import React, { Fragment } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport './NavigationItems.css';\n    \nconst NavigationItems = (props) => {\n\n    let allButtons;\n\n    let alternatingButton;\n\n    if (props.current === '/') {\n        alternatingButton = <h3 className='loginButton'><NavLink to=\"/profile\">Profile</NavLink></h3>\n    } else if (props.current === '/profile') {\n        alternatingButton = <h3 className=\"loginButton\"><NavLink to=\"/home\">Home</NavLink></h3>\n    } else {\n        alternatingButton = (\n            <Fragment>\n                <h3 className=\"loginButton\"><NavLink to=\"/home\">Home</NavLink></h3>\n                <h3 className='loginButton'><NavLink to=\"/profile\">Profile</NavLink></h3>\n            </Fragment>\n        )\n    }\n\n    if (props.loggedIn) {\n        allButtons = (\n            <Fragment>\n                {alternatingButton}\n                <h3 className=\"loginButton\"><NavLink to=\"/logout\">Log Out</NavLink></h3>\n            </Fragment>\n        );\n    } else {\n        allButtons = (<h3 className=\"loginButton\"><NavLink to=\"/login\">Log In</NavLink></h3>);\n    }\n\n    return (\n        <Fragment>\n            {allButtons}\n        </Fragment>\n    )\n\n}\n\nexport default NavigationItems","import React, { Fragment } from 'react';\nimport './Header.css';\nimport NavigationItems from '../NavigationItems/NavigationItems';\nimport { NavLink } from 'react-router-dom';\n\nconst header = (props) => {\n\n    return (\n        <Fragment>\n            <div className=\"header\">\n                <div className='DrawerToggle' onClick={props.toggle}>\n                    <div></div>\n                    <div></div>\n                    <div></div>\n                </div>\n                <h3 className=\"headerH3\"><NavLink to=\"/home\">Running Blog Thing</NavLink></h3>\n                <div className=\"innerHeader desktopOnly\">\n                    <NavigationItems loggedIn={props.loggedIn} current={props.current} />\n                </div>\n            </div>\n        </Fragment>\n    )\n}\n\nexport default header;","import React from 'react';\n\nimport './Backdrop.css';\n\nconst backdrop = (props) => (\n  props.show ? <div className='Backdrop' onClick={props.clicked}></div> : null\n)\n\nexport default backdrop;\n","import React, { Fragment } from 'react';\n\nimport NavigationItems from '../NavigationItems/NavigationItems';\nimport './SideDrawer.css';\nimport Backdrop from '../../UI/Backdrop/Backdrop';\n\nconst sideDrawer = (props) => {\n  let attachedClasses = ['SideDrawer', 'Close'];\n  if (props.open) {\n    attachedClasses = ['SideDrawer', 'Open'];\n  }\n\n  return (\n    <Fragment>\n      <Backdrop show={props.open} clicked={props.toggle}/>\n      <div className={attachedClasses.join(' ')} onClick={props.toggle}>\n        <nav>\n          <NavigationItems loggedIn={props.loggedIn} current={props.current} />\n        </nav>\n      </div>\n    </Fragment>\n  )\n}\n\nexport default sideDrawer;\n","import React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport Header from '../../components/Navigation/Header/Header';\nimport SideDrawer from '../../components/Navigation/SideDrawer/SideDrawer';\nimport './Layout.css'\nimport { checkLogin } from '../../store/actions/index';\n\nclass Layout extends Component {\n    state = {\n        showSideDrawer: false\n    }\n\n    componentWillMount() {\n        this.props.checkLogin()\n    }\n\n    sideDrawerToggleHandler = () => {\n        this.setState((prevState) => {\n          return {showSideDrawer: !prevState.showSideDrawer}\n        })\n    }\n\n    \n    render () {\n\n        let mainContent = (\n            <main>\n                {this.props.children}\n            </main>\n        )\n\n        if (this.state.showSideDrawer) {\n            mainContent = (\n                <main className='noScrollMain'>\n                    {this.props.children}\n                </main>\n            )\n        }\n\n        return (\n            <Fragment>\n                <Header loggedIn={this.props.loggedIn} toggle={this.sideDrawerToggleHandler} current={this.props.currentPath} />\n                <SideDrawer loggedIn={this.props.loggedIn} open={this.state.showSideDrawer} toggle={this.sideDrawerToggleHandler} current={this.props.currentPath} />\n                {mainContent}\n            </Fragment>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        loggedIn: state.login.loggedIn,\n        currentPath: state.layout.path\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        checkLogin: () => dispatch(checkLogin())\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Layout);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../../store/actions/index';\n\nclass MyPosts extends Component {\n\n    componentWillMount() {\n        const token = localStorage.getItem('token');\n        this.props.getAllPostsByAuthor(token)\n    }\n\n    render() {\n        return (\n            <h1>Hello</h1>\n        )\n    }\n}\n\n// const mapStateToProps = state => {\n//     return {\n\n//     }\n// }\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        getAllPostsByAuthor: (token) => dispatch(actions.getAllPostsByAuthor(token)),\n    }\n}\n\nexport default connect(null, mapDispatchToProps)(MyPosts);","import React, { Component } from 'react';\nimport './App.css';\n// import asyncComponent from './hoc/asyncComponent/asyncComponent';\nimport { Switch, Route, Redirect, withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport HomePage from './containers/HomePage/HomePage';\nimport Login from './containers/Login/Login';\nimport Profile from './containers/Profile/Profile';\nimport Logout from './containers/Logout/Logout';\nimport Layout from './hoc/Layout/Layout';\nimport MyPosts from './containers/MyPosts/MyPosts';\n\n// const asyncLogin = asyncComponent(() => {\n//   return import('./containers/Login/Login');\n// });\n\n// const asyncHome = asyncComponent(() => {\n//   return import ('./containers/HomePage/HomePage');\n// })\n\nclass App extends Component {\n  render() {\n\n    let routes = (\n      <Switch>\n        <Route path=\"/login\" component={Login} />\n        <Route path=\"/\" exact component={HomePage} />\n        <Redirect to=\"/\" />\n      </Switch>\n    )\n\n    if (this.props.loggedIn) {\n      routes = (\n        <Switch>\n          <Route path=\"/logout\" component={Logout} />\n          <Route path=\"/login\" component={Login} />\n          <Route path=\"/profile\" component={Profile} />\n          <Route path=\"/myposts\" component={MyPosts} />\n          <Route path=\"/\" exact component={HomePage} />\n          <Redirect to=\"/\" />\n        </Switch>\n      )\n    }\n\n    return (\n      <div>\n        <Layout>\n          {routes}\n        </Layout>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    loggedIn: state.login.loggedIn\n  }\n}\n\nexport default withRouter(connect(mapStateToProps, null)(App));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { updateObject } from '../../shared/utility';\nimport * as actionTypes from '../actions/actionTypes';\n\nconst initialState = {\n    posts: null,\n    loading: false,\n    newPost: null\n}\n\nconst fetchPostsStart = (state, action) => {\n    return updateObject(state, {loading: true});\n}\n\nconst fetchPostsSuccess = (state, action) => {\n    return updateObject(state, {\n        posts: action.posts,\n        loading: false\n      });\n}\n\nconst createPostSuccess = (state, action) => {\n    return updateObject(state, {\n        newPost: action.post\n    })\n}\n\nconst fetchPostsFailure = (state, action) => {\n    return updateObject(state, {\n        loading: false\n    })\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n      case actionTypes.FETCH_POSTS_START: return fetchPostsStart(state, action);\n      case actionTypes.FETCH_POSTS_SUCCESS: return fetchPostsSuccess(state, action);\n      case actionTypes.NEW_POST_SUCCESS: return createPostSuccess(state, action);\n      case actionTypes.FETCH_POSTS_FAILURE: return fetchPostsFailure(state, action);\n      default: return state;\n    }\n}\n\nexport default reducer; \n","import { updateObject } from '../../shared/utility';\nimport * as actionTypes from '../actions/actionTypes';\n\nconst initialState = {\n    loggedIn: localStorage.getItem('token') != null, \n    redirectPath: null\n}\n\nconst handleLoggedInChange = (state, action) => {\n    return updateObject(state, {\n        loggedIn: localStorage.getItem('token') != null\n    })\n}\n\nconst handleRedirect = (state, action) => {\n    return updateObject(state, {\n        redirectPath: action.redirect\n    })\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.LOGIN: return handleLoggedInChange(state, action);\n        case actionTypes.REDIRECT: return handleRedirect(state, action);\n        case actionTypes.LOGOUT: return handleLoggedInChange(state, action);\n        default: return state;\n    }\n}\n\nexport default reducer;","import { updateObject } from '../../shared/utility';\nimport * as actionTypes from '../actions/actionTypes';\n\nconst initialState = {\n    message: null,\n    loading: false,\n    name: null\n}\n\nconst setMessage = (state, action) => {\n    return updateObject(state, {\n        message: action.message,\n        loading: false,\n        name: action.name\n      });\n}\n\nconst startLoading = (state, action) => {\n    return updateObject(state, {\n        loading: true\n    })\n}\n\nconst noProfileInfo = (state) => {\n    return updateObject(state, {\n        loading: false\n    })\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n      case actionTypes.GET_PROFILE_INFO: return setMessage(state, action);\n      case actionTypes.START_RETRIEVING_PROFILE_DATA: return startLoading(state, action);\n      case actionTypes.PROFILE_INFO_FAILURE: return noProfileInfo(state);\n      default: return state;\n    }\n}\n\nexport default reducer; ","import { updateObject } from '../../shared/utility';\nimport * as actionTypes from '../actions/actionTypes';\n\nconst initialState = {\n    path: null\n}\n\nconst handleUpdateCurrentPath = (state, action) => {\n    return updateObject(state, {\n        path: action.path\n    })\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.UPDATE_CURRENT_PATH: return handleUpdateCurrentPath(state, action);\n        default: return state;\n    }\n}\n\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport { createStore, applyMiddleware, compose, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport postsReducer from './store/reducers/posts';\nimport loginReducer from './store/reducers/login';\nimport profileReducer from './store/reducers/profile';\nimport layoutReducer from './store/reducers/layout';\n\nconst composeEnhancers = process.env.NODE_ENV === 'development' ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : null || compose;\n\nconst rootReducer = combineReducers({\n    posts: postsReducer,\n    login: loginReducer,\n    profile: profileReducer,\n    layout: layoutReducer\n})\n\nconst store = createStore(rootReducer, composeEnhancers(\n    applyMiddleware(thunk)\n    ));\n    \n    const app = (\n    <Provider store={store}>\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\n            <App />\n        </BrowserRouter>\n    </Provider>\n)\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}